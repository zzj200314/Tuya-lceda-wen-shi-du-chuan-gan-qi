C51 COMPILER V9.60.0.0   USER_ADC                                                          02/18/2021 10:10:07 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE USER_ADC
OBJECT MODULE PLACED IN .\Obj\User_ADC.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE src\User_ADC.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\;.\src;.\mcu_sdk)
                    - DEBUG OBJECTEXTEND PRINT(.\List\User_ADC.lst) TABS(2) OBJECT(.\Obj\User_ADC.obj)

line level    source

   1          /******************************************************************************
   2          文件名称: ADC.c
   3          文件标识: STC8A8K64S4A12
   4          摘    要: ADC硬件操作函数
   5          当前版本: V1.0  
   6          完成日期: 2021.02.03
   7          *******************************************************************************/
   8          #define USER_ADC_GLOBALS
   9          #include "include.h"
  10          #include "wifi.h"
  11          
  12          
  13          
  14          //#define Interrupt //中断方法
  15          #define Query     //查询方法
  16          
  17          
  18          
  19          
  20          #ifdef Interrupt
              
              /*****************************************************************************
              函数名称 : I2C_init
              功能描述 : I2C初始化
              输入参数 : 无
              返回参数 : 无
              使用说明 : 无
              *****************************************************************************/
              void ADC_init()
              {
                P1M0 = 0x00;                                //设置P1.0为ADC口
                P1M1 = 0x01;
                ADCCFG = 0x2f;                              //设置ADC时钟为系统时钟/2/16/16
                ADC_CONTR = 0x80;                           //使能ADC模块
                EADC = 1;                                   //使能ADC中断
                EA = 1;
                ADC_CONTR |= 0x40;                          //启动AD转换
              }
              
              /*****************************************************************************
              函数名称 : I2C_Isr
              功能描述 : I2C中断处理函数
              输入参数 : 无
              返回参数 : 无
              使用说明 : 无
              *****************************************************************************/
              void ADC_Isr() interrupt 5
              {
                ADC_CONTR &= ~0x20;                         //清中断标志
                ADC_CONTR |= 0x40;                          //继续AD转换
              }
              
              
              
C51 COMPILER V9.60.0.0   USER_ADC                                                          02/18/2021 10:10:07 PAGE 2   

              #elif defined(Query)
  56          
  57          /*****************************************************************************
  58          函数名称 : I2C_init
  59          功能描述 : I2C初始化
  60          输入参数 : 无
  61          返回参数 : 无
  62          使用说明 : 无
  63          *****************************************************************************/
  64          void ADC_init()
  65          {
  66   1        P1M0 = 0x00;                                //设置P1.0为ADC口
  67   1        P1M1 = 0x01;
  68   1        ADCCFG = 0x2f;                              //设置ADC时钟为系统时钟/2/16/16
  69   1        ADC_CONTR = 0x80;                           //使能ADC模块
  70   1      }
  71          /*****************************************************************************
  72          函数名称 : Wait
  73          功能描述 : 检测状态
  74          输入参数 : 无
  75          返回参数 : 无
  76          使用说明 : 无
  77          *****************************************************************************/
  78          int ADC_read()
  79          {
  80   1        int res;
  81   1        
  82   1        ADC_CONTR |= 0x40;                      //启动AD转换
  83   1        _nop_();
  84   1        _nop_();
  85   1        while (!(ADC_CONTR & 0x20));            //查询ADC完成标志
  86   1        ADC_CONTR &= ~0x20;                     //清完成标志
  87   1        res = (ADC_RES<<8)|ADC_RESL;            //读取ADC结果
  88   1        
  89   1        return res;
  90   1      }
  91          #endif
  92          
  93          
  94          
  95          /*****************************************************************************
  96          函数名称 : WriteCmd
  97          功能描述 : 写指令函数
  98          输入参数 : command：指令
  99          返回参数 : 无
 100          使用说明 : 无
 101          *****************************************************************************/
 102          void Get_Voltage()
 103          {
 104   1        int res;
 105   1        int vcc;  //电池电压，单位mv
 106   1        int i;
 107   1        
 108   1        ADC_init();
 109   1        ADC_read();
 110   1        ADC_read();
 111   1        res = 0;
 112   1        for(i=0;i<8;i++)
 113   1        {
 114   2          res += ADC_read();
 115   2        }
 116   1        res >>= 3;
C51 COMPILER V9.60.0.0   USER_ADC                                                          02/18/2021 10:10:07 PAGE 3   

 117   1        vcc = (int)((6600L*res>>12)+50);  //电压计算
 118   1        
 119   1        if((vcc <= 4200) && (vcc >= 4088))
 120   1        {
 121   2          FlashBuffer.Power = 100;
 122   2          OLED_ShowNum(96,0,FlashBuffer.Power,3,8);
 123   2          OLED_ShowChar(120,0,'%',8);
 124   2        }
 125   1        else if((vcc <= 4088) && (vcc >= 4012))
 126   1        {
 127   2          FlashBuffer.Power = 90;
 128   2          OLED_ShowNum(96,0,FlashBuffer.Power,3,8);
 129   2          OLED_ShowChar(120,0,'%',8);
 130   2        }
 131   1        else if((vcc <= 4012) && (vcc >= 3956))
 132   1        {
 133   2          FlashBuffer.Power = 80;
 134   2          OLED_ShowNum(96,0,FlashBuffer.Power,3,8);
 135   2          OLED_ShowChar(120,0,'%',8);
 136   2        }
 137   1        else if((vcc <= 3956) && (vcc >= 3910))
 138   1        {
 139   2          FlashBuffer.Power = 70;
 140   2          OLED_ShowNum(96,0,FlashBuffer.Power,3,8);
 141   2          OLED_ShowChar(120,0,'%',8);
 142   2        }
 143   1        else if((vcc <= 3910) && (vcc >= 3870))
 144   1        {
 145   2          FlashBuffer.Power = 60;
 146   2          OLED_ShowNum(96,0,FlashBuffer.Power,3,8);
 147   2          OLED_ShowChar(120,0,'%',8);
 148   2        }
 149   1        else if((vcc <= 3870) && (vcc >= 3830))
 150   1        {
 151   2          FlashBuffer.Power = 50;
 152   2          OLED_ShowNum(96,0,FlashBuffer.Power,3,8);
 153   2          OLED_ShowChar(120,0,'%',8);
 154   2        }
 155   1        else if((vcc <= 3830) && (vcc >= 3802))
 156   1        {
 157   2          FlashBuffer.Power = 40;
 158   2          OLED_ShowNum(96,0,FlashBuffer.Power,3,8);
 159   2          OLED_ShowChar(120,0,'%',8);
 160   2        }
 161   1        else if((vcc <= 3802) && (vcc >= 3782))
 162   1        {
 163   2          FlashBuffer.Power = 30;
 164   2          OLED_ShowNum(96,0,FlashBuffer.Power,3,8);
 165   2          OLED_ShowChar(120,0,'%',8);
 166   2        }
 167   1        else if((vcc <= 3782) && (vcc >= 3764))
 168   1        {
 169   2          FlashBuffer.Power = 20;
 170   2          OLED_ShowNum(96,0,FlashBuffer.Power,3,8);
 171   2          OLED_ShowChar(120,0,'%',8);
 172   2        }
 173   1        else if((vcc <= 3764) && (vcc >= 3740))
 174   1        {
 175   2          FlashBuffer.Power = 10;
 176   2          OLED_ShowNum(96,0,FlashBuffer.Power,3,8);
 177   2          OLED_ShowChar(120,0,'%',8);
 178   2        }
C51 COMPILER V9.60.0.0   USER_ADC                                                          02/18/2021 10:10:07 PAGE 4   

 179   1        else if(vcc <= 3740)
 180   1        {
 181   2          FlashBuffer.Power = 0;
 182   2          OLED_ShowNum(96,0,FlashBuffer.Power,3,8);
 183   2          OLED_ShowChar(120,0,'%',8);
 184   2        }
 185   1        mcu_dp_enum_update(DPID_BATTERY_STATE,FlashBuffer.Power);
 186   1        mcu_dp_value_update(DPID_BATTERY_PERCENTAGE,FlashBuffer.Power); //VALUE型数据上报;
 187   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    546    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
