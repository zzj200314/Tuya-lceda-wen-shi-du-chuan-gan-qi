C51 COMPILER V9.60.0.0   USER_KEY                                                          02/18/2021 10:10:07 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE USER_KEY
OBJECT MODULE PLACED IN .\Obj\User_Key.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE src\User_Key.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\;.\src;.\mcu_sdk)
                    - DEBUG OBJECTEXTEND PRINT(.\List\User_Key.lst) TABS(2) OBJECT(.\Obj\User_Key.obj)

line level    source

   1          /******************************************************************************
   2          文件名称: key.c
   3          文件标识: STC8A8K64S4A12
   4          摘    要: 按键处理函数
   5          当前版本: V1.0  
   6          完成日期: 2021.02.05
   7          *******************************************************************************/
   8          #define USER_KEY_GLOBAL
   9          #include "include.h"
  10          #include "wifi.h"
  11          
  12          
  13          
  14          uint32_t last_time;
  15          uint8_t Status;
  16          KEY_HANDLE Short_Press_Handle;
  17          KEY_HANDLE Long_Press_Handle;
  18          bit lastButtonState;
  19          
  20          /*****************************************************************************
  21          函数名称 : Key1_ShortPress_Handle
  22          功能描述 : Key1短按处理函数
  23          输入参数 : 无
  24          返回参数 : 无
  25          使用说明 : 无
  26          *****************************************************************************/
  27          static void Key1_ShortPress_Handle(void)
  28          {
  29   1        OLED_ShowStr(24,1," Refresh  ",16);
  30   1        Get_Voltage();         //读取电池电压
  31   1        sht30_read();          //读取温湿度
  32   1        OLED_ShowStr(24,1,"          ",16);
  33   1      }
  34          /*****************************************************************************
  35          函数名称 : Key1_LongPress_Handle
  36          功能描述 : Key1长按处理函数
  37          输入参数 : 无
  38          返回参数 : 无
  39          使用说明 : 无
  40          *****************************************************************************/
  41          static void Key1_LongPress_Handle(void)
  42          {
  43   1        //OLED_ShowStr(24,1,"reset wifi",16);
  44   1        mcu_reset_wifi();
  45   1        if((mcu_get_wifi_work_state() == SMART_CONFIG_STATE) || (mcu_get_wifi_work_state() == AP_STATE))
  46   1        {
  47   2          OLED_ShowStr(24,1,"reset wifi",16);
  48   2        }
  49   1        //OLED_ShowStr(24,1,"          ",16);
  50   1      }
  51          /*****************************************************************************
  52          函数名称 : key_init
  53          功能描述 : key初始化
  54          输入参数 : 无
C51 COMPILER V9.60.0.0   USER_KEY                                                          02/18/2021 10:10:07 PAGE 2   

  55          返回参数 : 无
  56          使用说明 : 无
  57          *****************************************************************************/
  58          void key_init(void)
  59          {
  60   1        last_time=0;
  61   1        Status=0;
  62   1        lastButtonState=0;
  63   1        //
  64   1        Long_Press_Handle = Key1_LongPress_Handle;
  65   1        //
  66   1        Short_Press_Handle = Key1_ShortPress_Handle;
  67   1      }
  68          /*****************************************************************************
  69          函数名称 : Get_Key_Press_Time
  70          功能描述 : 获取按键按下时间
  71          输入参数 : last_time:上次按下时间
  72          返回参数 : 2次按键之间差值
  73          使用说明 : 无
  74          *****************************************************************************/
  75          static uint32_t Get_Key_Press_Time(uint32_t last_time)
  76          {
  77   1        uint32_t time;
  78   1        
  79   1        time = get_count_value();
  80   1        if(time >= last_time)
  81   1        {
  82   2          time -= last_time;
  83   2        }
  84   1        else
  85   1        {
  86   2          //Time2溢出
  87   2          time += ~last_time;
  88   2        } 
  89   1      
  90   1        return time;
  91   1      }
  92          /*****************************************************************************
  93          函数名称 : key_scan
  94          功能描述 : 扫描按键
  95          输入参数 : 无
  96          返回参数 : 无
  97          使用说明 : 无
  98          *****************************************************************************/
  99          void key_scan(void)
 100          {
 101   1        uint32_t time;
 102   1        
 103   1        switch(Status)
 104   1        {
 105   2          case KEY_NO:
 106   2            //有按键按下
 107   2            if(K1==0)
 108   2            {
 109   3              Status = KEY_DOWN;
 110   3              last_time = get_count_value();
 111   3            }
 112   2            break;
 113   2            
 114   2          case KEY_DOWN:
 115   2            if(K1==1)
 116   2            {
C51 COMPILER V9.60.0.0   USER_KEY                                                          02/18/2021 10:10:07 PAGE 3   

 117   3              Status = KEY_UP;
 118   3              lastButtonState = 0;
 119   3            }
 120   2            break;
 121   2                    
 122   2          case KEY_LONG:
 123   2            if(K1==1)
 124   2            {
 125   3              last_time = 0;
 126   3              Status = KEY_NO;
 127   3              lastButtonState = 0;
 128   3            }
 129   2            break;  
 130   2        }
 131   1      
 132   1        if((Status == KEY_DOWN) || (Status == KEY_LONG))
 133   1        {
 134   2          time = Get_Key_Press_Time(last_time);
 135   2          if(time >= TIME_PRESS_LONG)
 136   2          {
 137   3            //一直长按
 138   3            //last_time = 0;
 139   3            Status = KEY_LONG;
 140   3            if(Long_Press_Handle && (lastButtonState == 0))
 141   3            {
 142   4              Key1_LongPress_Handle();
 143   4              lastButtonState = 1;
 144   4            }
 145   3          }          
 146   2        }
 147   1        else if(Status == KEY_UP)
 148   1        {
 149   2          //松开
 150   2          time = Get_Key_Press_Time(last_time);
 151   2        
 152   2          last_time = 0;
 153   2          Status = KEY_NO;
 154   2          if((time >= TIME_PRESS_SHORT) && (time < TIME_PRESS_LONG))
 155   2          {
 156   3            //短按
 157   3            if(Short_Press_Handle && (lastButtonState == 0))
 158   3            {
 159   4              Key1_ShortPress_Handle();
 160   4            }
 161   3          }
 162   2          else if(time >= TIME_PRESS_LONG)
 163   2          {
 164   3            //长按
 165   3            if(Long_Press_Handle && (lastButtonState == 0))
 166   3            {
 167   4              Key1_LongPress_Handle();
 168   4            }
 169   3          }
 170   2          
 171   2        }
 172   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    478    ----
   CONSTANT SIZE    =     33    ----
   XDATA SIZE       =     11      12
C51 COMPILER V9.60.0.0   USER_KEY                                                          02/18/2021 10:10:07 PAGE 4   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
